<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- $Id$ -->

<pack name="flac" license="">
  <meta>
    <homepage>http://flac.sourceforge.net/</homepage>
    <download>http://downloads.xiph.org/releases/flac/</download>
    <download>http://flac.sourceforge.net/download.html</download>
    <descriptions>
      <description lang="en" type="short">Free Lossless Audio Codec</description>
      <description lang="en" type="long">FLAC stands for Free Lossless Audio Codec, an audio format similar to MP3, but lossless, meaning that audio is compressed in FLAC without any loss in quality.</description>
      <description lang="de" type="short">Free Lossless Audio Codec</description>
      <description lang="de" type="long"></description>
    </descriptions>
    <keywords></keywords>
  </meta>

  <comments>
  </comments>

  <set version="1.3.0" date="2013-05-27" state="works">

    <downloads>
      <download file="flac-1.3.0.tar.xz">
        <url checked="2014-01-14">http://downloads.xiph.org/releases/flac/flac-1.3.0.tar.xz</url>
        <hash type="CRC32"></hash>
        <hash type="MD5"></hash>
        <hash type="SHA1"></hash>
        <hash type="SHA512"></hash>
        <hash type="RIPEMD256"></hash>
        <size>1.084.256</size>
      </download>
    </downloads>

<!--
Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules          less verbose build output (undo: `make V=1')
  --disable-silent-rules         verbose build output (undo: `make V=0')
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-static[=PKGS]  build static libraries [default=no]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --disable-asm-optimizations
                          Don't use any assembly optimization routines
  --enable-debug          Turn on debugging
  --enable-sse            Enable SSE support by asserting that the OS supports
                          SSE instructions
  --disable-3dnow         Disable 3DNOW! optimizations
  --disable-altivec       Disable Altivec optimizations
  --disable-thorough-tests
                          Disable thorough (long) testing, do only basic tests
  --enable-exhaustive-tests
                          Enable exhaustive testing (VERY long)
  --enable-gcc-werror     Enable -Werror in all Makefiles
  --enable-stack-smash-protection
                          Enable GNU GCC stack smash protection
  --enable-valgrind-testing
                          Run all tests inside Valgrind
  --disable-doxygen-docs  Disable API documentation building via Doxygen
  --enable-local-xmms-plugin
                          Install XMMS plugin to ~/.xmms/Plugins instead of
                          system location
  --disable-xmms-plugin   Do not build XMMS plugin
  --disable-cpplibs       Do not build libFLAC++
  --disable-ogg           Disable ogg support (default: test for libogg)
  --disable-oggtest       Do not try to compile and run a test Ogg program
  --disable-rpath         do not hardcode runtime library paths

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-xmms-prefix=PFX  Prefix where XMMS is installed (optional)
  --with-xmms-exec-prefix=PFX Exec prefix where XMMS is installed (optional)
  --with-ogg=PFX          Prefix where libogg is installed (optional)
  --with-ogg-libraries=DIR Directory where libogg library is installed (optional)
  --with-ogg-includes=DIR Directory where libogg header files are installed (optional)
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libd
ir

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
-->

<!-- wants: ogg xmms -->

    <commands>
PACKAGE_NAME=flac
PACKAGE_VERSION=1.3.0

oegimport libiconv
#oegimport gettext

oegextract ${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.xz

mkdir -p "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}"
#cp AUTHORS "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}/"

configure --prefix=${OEG_BASE_DIR} --with-gnu-ld --with-sysroot=${OEG_BASE_DIR} --disable-rpath --with-libiconv-prefix=${OEG_BASE_DIR} --bindir=${OEG_BASE_BIN_DIR} --libdir=${OEG_BASE_LIB_DIR} ${CONFIGURE_HOST_PARA}
make
make install-strip DESTDIR=${OEG_INSTALL_DIR}

cd "${OEG_INSTALL_DIR}${OEG_BASE_DIR}"
<if64bits>
mv bin/*.dll bin64/
rm -rf bin
# TODO: Do we need to edit the .la files in lib64?
</if64bits>
oegarchive ${PACKAGE_NAME}-${PACKAGE_VERSION}
    </commands>
  </set>
</pack>

