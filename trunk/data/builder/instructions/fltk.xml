<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- $Id$ -->

<pack name="fltk" license="GNU LGPL with exceptions">
  <meta>
    <homepage>http://www.fltk.org/</homepage>
    <download>http://www.fltk.org/software.php</download>
    <descriptions>
      <description lang="en" type="short">Cross-platform C++ GUI toolkit</description>
      <description lang="en" type="long">FLTK (pronounced "fulltick") is a cross-platform C++ GUI toolkit. It provides modern GUI functionality without the bloat and supports 3D graphics via OpenGL and its built-in GLUT emulation.</description>
      <description lang="de" type="short"></description>
      <description lang="de" type="long"></description>
    </descriptions>
    <keywords></keywords>
  </meta>

  <comments>
  </comments>

  <set version="1.3.2" date="2012-12-09" state="works">

    <downloads>
      <download file="fltk-1.3.2-source.tar.gz">
        <url checked="2014-01-21">http://www.fltk.org/software.php?VERSION=1.3.2&FILE=fltk/1.3.2/fltk-1.3.2-source.tar.gz</url>
        <hash type="CRC32"></hash>
        <hash type="MD5"></hash>
        <hash type="SHA1"></hash>
        <hash type="SHA512"></hash>
        <hash type="RIPEMD256"></hash>
        <size></size>
      </download>
    </downloads>

<!--
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-cygwin         use the Cygwin libraries (default=no)
  --enable-x11            use Cygwin with X11 (default=no)
  --enable-cairoext       use fltk code instrumentation for cairo extended use (default=no)
  --enable-cairo          use lib Cairo  (default=no)
  --enable-cp936          turn on CP936 default=no
  --enable-gl             turn on OpenGL support default=yes
  --enable-shared         turn on shared libraries default=no
  --enable-threads        enable multi-threading support (default=yes)
  --disable-largefile     omit support for large files
  --enable-localjpeg      use local JPEG library, default=auto
  --enable-localzlib      use local ZLIB library, default=auto
  --enable-localpng       use local PNG library, default=auto
  --enable-xinerama       turn on Xinerama support default=yes
  --enable-xft            turn on Xft support default=yes
  --enable-xdbe           turn on Xdbe support default=yes

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-optim="flags"    use custom optimization flags
  --with-archflags="flags" use custom architecture flags
                          (possible Mac OS X values include -arch i386, -arch x86_64, -arch ppc)
  --with-links            make header links for common misspellings (default=no)
  --with-x                use the X Window System

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  XMKMF       Path to xmkmf, Makefile generator for X Window System


Check out FLTK 1.3.2 using Subversion:
$ svn co http://svn.easysw.com/public/fltk/fltk/tags/release-1.3.2 fltk-1.3.2

2. For full functionality, apply patches. Here's a shell script to do
that:

#!/bin/bash
set -e
apply_patch()
{
    rm -f $2
    wget http://www.fltk.org/strfiles/$1/$2
    patch -p1 < $2
}

# Export dead key information from FLTK to the apps
# http://www.fltk.org/str.php?L2599
apply_patch 2599 fltk-1_v4.3.x-keyboard-x11.patch
apply_patch 2599 fltk-1_v4.3.x-keyboard-win32.patch
apply_patch 2599 fltk-1_v6.3.x-keyboard-osx.patch

# Notify applications of changes to the clipboard
# http://www.fltk.org/str.php?L2636
apply_patch 2636 fltk-1.3.x-clipboard.patch
apply_patch 2636 fltk-1_v5.3.x-clipboard-x11.patch
apply_patch 2636 fltk-1_v3.3.x-clipboard-win32-fix.patch
apply_patch 2636 fltk-1_v2.3.x-clipboard-win32.patch
apply_patch 2636 fltk-1_v2.3.x-clipboard-osx.patch

# Ability to convert a Fl_Pixmap to a Fl_RGB_Image
# http://www.fltk.org/str.php?L2659
apply_patch 2659 pixmap_v2.patch

# Support for custom cursors
# http://www.fltk.org/str.php?L2660
apply_patch 2660 fltk-1_v5.3.x-cursor.patch

# Improve modality interaction with WM
# http://www.fltk.org/str.php?L2802
apply_patch 2802 fltk-1_v2.3.0-modal.patch

# Window icons
# http://www.fltk.org/str.php?L2816
apply_patch 2816 fltk-1_v3.3.0-icons.patch

# Multihead
# http://fltk.org/str.php?L2860
apply_patch 2860 fltk-1.3.x-screen_num.patch
apply_patch 2860 fltk-1_v3.3.x-multihead.patch

3. Use CMake to build FLTK using the same procedures described below for
   building TigerVNC.  The recipes in the "Build Recipes" section also apply.
   If you want optimized code, make sure to build with
   -DCMAKE_BUILD_TYPE=Release. 

4. (optional) Use 'make install' to install FLTK into a directory of your
   choosing.

5. When building TigerVNC, set the FLTK_FLUID_EXECUTABLE CMake variable to the
   location of the fluid executable that was built in Step 3 or installed in
   Step 4.  This gives CMake a hint as to where to find the FLTK library.

6. If you did not install FLTK, then set the FLTK_INCLUDE_DIR CMake variable to
   the location of the FLTK source directory.
-->

    <commands>
PACKAGE_NAME=fltk
PACKAGE_VERSION=1.3.2

oegimport zlib   # findet sonst die system-zlib im mingw directory! :-( TODO: check

oegextract ${PACKAGE_NAME}-${PACKAGE_VERSION}-source.tar.gz
cd fltk-1.3.2

# TODO apply patches here

# fltk doc an falscher stelle

mkdir -p "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}"
cp COPYING CREDITS README "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}/"

# optional: libjpeg zlib pnglib
configure --prefix=${OEG_BASE_DIR} --enable-gl --enable-shared --enable-threads
make
make install DESTDIR=${OEG_INSTALL_DIR}

cd "${OEG_INSTALL_DIR}${OEG_BASE_DIR}"
<if64bits>
mv bin bin64
mv lib lib64
# TODO: Do we need to edit the .la files in lib64?
</if64bits>
oegarchive ${PACKAGE_NAME}-${PACKAGE_VERSION}
    </commands>
  </set>
</pack>

