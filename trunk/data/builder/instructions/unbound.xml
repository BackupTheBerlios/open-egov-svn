<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- $Id$ -->

<pack name="unbound" license="BSD License">
  <meta>
    <homepage>http://unbound.net/</homepage>
    <download>http://unbound.net/download.html</download>
    <descriptions>
      <description lang="en" type="short">Validating, recursive, and caching DNS resolver</description>
      <description lang="en" type="long">Unbound is a validating, recursive, and caching DNS resolver. The C implementation of Unbound is developed and maintained by NLnet Labs. It is based on ideas and algorithms taken from a java prototype developed by Verisign labs, Nominet, Kirei and ep.net. Unbound is designed as a set of modular components, so that also DNSSEC (secure DNS) validation and stub-resolvers (that do not run as a server, but are linked into an application) are easily possible.</description>
      <description lang="de" type="short"></description>
      <description lang="de" type="long"></description>
    </descriptions>
  </meta>

  <comments>
  </comments>

  <set version="1.4.21" date="2013-09-10" state="works">

    <downloads>
      <download file="unbound-1.4.21.tar.gz">
        <url checked="2014-01-20">http://www.unbound.net/downloads/unbound-1.4.21.tar.gz</url>
        <hash type="CRC32"></hash>
        <hash type="MD5"></hash>
        <hash type="SHA1"></hash>
        <hash type="SHA512"></hash>
        <hash type="RIPEMD256"></hash>
        <size></size>
      </download>
    </downloads>

<!--
  --disable-sha2          Disable SHA256 and SHA512 RRSIG support
  --disable-gost          Disable GOST support
  --disable-ecdsa         Disable ECDSA support
  --enable-static-exe     enable to compile executables statically against
                          event, ldns libs, for debug purposes
Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-conf-file=path   Pathname to the Unbound configuration file
  --with-run-dir=path     set default directory to chdir to (by default dir
                          part of cfg file)
  --with-chroot-dir=path  set default directory to chroot to (by default same
                          as run-dir)
  --with-share-dir=path   set default directory with shared data (by default
                          same as share/unbound)
  --with-pidfile=filename set default pathname to unbound pidfile (default
                          run-dir/unbound.pid)
  --with-rootkey-file=filename
                          set default pathname to root key file (default
                          run-dir/root.key). This file is read and written.
  --with-rootcert-file=filename
                          set default pathname to root update certificate file
                          (default run-dir/icannbundle.pem). This file need
                          not exist if you are content with the builtin.
  --with-username=user    set default user that unbound changes to (default
                          user is unbound)
  --with-pthreads         use pthreads library, or --without-pthreads to
                          disable threading support.
  --with-pyunbound        build PyUnbound, or --without-pyunbound to skip it.
                          (default=no)
  --with-pythonmodule     build Python module, or --without-pythonmodule to
                          disable script engine. (default=no)
  --with-nss=path         use libnss instead of openssl, installed at path.
  --with-ssl=pathname     enable SSL (will check /usr/local/ssl /usr/lib/ssl
                          /usr/ssl /usr/pkg /usr/local /opt/local /usr/sfw/usr)
  --with-libevent=pathname
                          use libevent (will check /usr/local /opt/local
                          /usr/lib /usr/pkg /usr/sfw /usr or you can specify
                          an explicit path). Slower, but allows use of large
                          outgoing port ranges.
  --with-libunbound-only  do not build daemon and tool programs
  --with-ldns=PATH        specify prefix of path of ldns library to use

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  PYTHON_VERSION
              The installed Python version to use, for example '2.3'. This
              string will be appended to the Python interpreter canonical
              name.
-->

    <commands>
PACKAGE_NAME=unbound
PACKAGE_VERSION=1.4.21

oegimport expat
oegimport openssl            # or let it out
oegimport  zlib
oegimport pthreads-win32     # or use: --without-pthreads
oegimport ldns               # required
#oegimport  openssl
#oegimport   zlib

oegextract ${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz

mkdir -p "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}"
cp LICENSE README "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}/"

configure --prefix=${OEG_BASE_DIR} --with-sysroot=${OEG_BASE_DIR} --with-gnu-ld --with-pthreads=${OEG_BASE_DIR} --with-libexpat=${OEG_BASE_DIR} --with-ssl=${OEG_BASE_DIR} --with-ldns=${OEG_BASE_DIR} --bindir=${OEG_BASE_BIN_DIR} --libdir=${OEG_BASE_LIB_DIR} ${CONFIGURE_HOST_PARA}
#--with-libunbound-only
make
make install DESTDIR=${OEG_INSTALL_DIR}

cd "${OEG_INSTALL_DIR}${OEG_BASE_DIR}"
<if64bits>
mv bin bin64
mv sbin sbin64
# TODO: Do we need to edit the .la files in lib64?
</if64bits>
oegarchive ${PACKAGE_NAME}-${PACKAGE_VERSION}
    </commands>
  </set>
</pack>

