<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- $Id$ -->

<pack name="nettle" license="">
  <meta>
    <homepage>http://www.lysator.liu.se/~nisse/nettle/</homepage>
    <download>http://www.lysator.liu.se/~nisse/archive/</download>
    <!-- old files: ftp://ftp.lysator.liu.se/pub/security/lsh -->
    <descriptions>
      <description lang="en" type="short">Low-level cryptographic library</description>
      <description lang="en" type="long">Nettle is a cryptographic library that is designed to fit easily in more or less any context: In crypto toolkits for object-oriented languages (C++, Python, Pike, ...), in applications like LSH or GNUPG, or even in kernel space.</description>
      <description lang="de" type="short"></description>
      <description lang="de" type="long"></description>
    </descriptions>
    <keywords>libnettle</keywords>
  </meta>

  <comments>
    <comment>The nettle library v2.0+ is split into two libraries, libnettle and libhogweed. libnettle contains the symmetric crypto algorithms that don't depend on GMP, while libhogweed contains the public key algorithms that depend on GMP. Using a single library worked fine with static linking, but not with dynamic linking. Consider an application that uses nettle and which doesn't use any public key cryptography. If this application is linked dynamically to nettle, it would have to be linked also with GMP if and only if public key support was enabled when the nettle library was installed.</comment>
  </comments>

  <set version="2.7.1" date="2013-05-29" state="works">
    <flags>
      <flag name="gmp"
            required="no"
            standard="yes"
            imports="gmp"
            para-if-pos=""
            para-if-neg="--disable-public-key"
            info="GNU MP needed for gnutls!"  />
      <flag name="openssl"
            required="no"
            standard="yes"
            imports="openssl"
            para-if-pos=""
            para-if-neg="--disable-openssl"
            info=""  />
    </flags>

    <downloads>
      <download file="nettle-2.7.1.tar.gz">
        <url checked="2014-01-20">http://www.lysator.liu.se/~nisse/archive/nettle-2.7.1.tar.gz</url>
        <hash type="CRC32"></hash>
        <hash type="MD5"></hash>
        <hash type="SHA1"></hash>
        <hash type="SHA512"></hash>
        <hash type="RIPEMD256"></hash>
        <size>1.558.863</size>
      </download>
    </downloads>

<!--
  --disable-public-key    Disable public key algorithms
  --disable-assembler     Disable assembler code
  --disable-static        Do not build any static library
  --disable-shared        Do not build any shared library
  --disable-pic           Do not try to compile library files as position
                          independent code
  --disable-openssl       Do not include openssl glue in the benchmark program
  --enable-gcov           Instrument for gcov (requires a modern gcc)
  --disable-documentation Omit building and installing the documentation.
                          (default=auto)
  --enable-arm-neon       Enable ARM Neon assembly. (default=auto)
  --disable-dependency-tracking
                          Disable dependency tracking. Dependency tracking
-->

    <commands>
PACKAGE_NAME=nettle
PACKAGE_VERSION=2.7.1

oegimport gmp                # GMP 3.1+ "required", else support for public key algorithms will be unavailable.
oegimport  readline
oegimport openssl
oegimport  zlib

oegextract ${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz

mkdir -p "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}"
cp AUTHORS COPYING.LIB README "${OEG_INSTALL_DIR}${OEG_BASE_DIR}/packages/${PACKAGE_NAME}-${PACKAGE_VERSION}/"

configure --prefix=${OEG_BASE_DIR} --bindir=${OEG_BASE_BIN_DIR} --libdir=${OEG_BASE_LIB_DIR} ${CONFIGURE_HOST_PARA} --with-lib-path=${OEG_BASE_LIB_DIR} --with-include-path=${OEG_BASE_DIR}/include

# Optional: Check summary output here. Public key crypto has to be "yes" - else GNU MP is missing somewhere above.

make
make install DESTDIR=${OEG_INSTALL_DIR}

cd "${OEG_INSTALL_DIR}${OEG_BASE_DIR}"
oegarchive ${PACKAGE_NAME}-${PACKAGE_VERSION}
    </commands>
  </set>
</pack>

