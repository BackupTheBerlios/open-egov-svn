--- src.original/signals.c	2013-07-25 21:02:47 +0000
+++ src/signals.c	2013-07-25 21:15:45 +0000
@@ -14,7 +14,6 @@
 #include <setjmp.h>
 #include "port.h"
 #include <sys/time.h>
-#include <sys/stat.h>   /* for debugger_dump() */
 #include "tf.h"
 #include "util.h"
 #include "pattern.h"	/* for tfio.h */
@@ -130,9 +129,6 @@
 
 static void   handle_interrupt(void);
 static void   terminate(int sig);
-static void   coremsg(FILE *dumpfile);
-static int    debugger_dump(void);
-static FILE  *get_dumpfile(void);
 static RETSIGTYPE core_handler(int sig);
 static RETSIGTYPE signal_scheduler(int sig);
 static RETSIGTYPE signal_jumper(int sig);
@@ -297,10 +293,8 @@
     return 0;
 }
 
-
 static RETSIGTYPE core_handler(int sig)
 {
-    FILE *dumpfile;
     setsighandler(sig, core_handler);  /* restore handler (POSIX) */
 
     if (sig == SIGQUIT) {
@@ -318,35 +312,7 @@
     setsighandler(sig, SIG_DFL);
     if (sig != SIGQUIT) {
         minimal_fix_screen();
-	dumpfile = get_dumpfile();
-        coremsg(dumpfile);
         fprintf(stderr, "> Abnormal termination - signal %d\r\n\n", sig);
-	if (dumpfile != stderr)
-	    fprintf(dumpfile, "> Abnormal termination - signal %d\r\n\n", sig);
-	if (dumpfile != stderr)
-	    fclose(dumpfile);
-
-	if (!debugger_dump()) {
-	    fputs("Also, if you can, include a stack trace in your email.\r\n",
-		stderr);
-#ifdef PLATFORM_UNIX
-	    fputs("To get a stack trace, do this:\r\n", stderr);
-	    fputs("cd src\r\n", stderr);
-	    fputs("script\r\n", stderr);
-	    fputs("gdb -q tf   ;# if gdb is unavailable, use 'dbx tf' "
-		"instead.\r\n", stderr);
-	    fputs("run\r\n", stderr);
-	    fputs("(do whatever is needed to reproduce the core dump)\r\n",
-		stderr);
-	    fputs("where\r\n", stderr);
-	    fputs("quit\r\n", stderr);
-	    fputs("exit\r\n", stderr);
-	    fputs("\r\n", stderr);
-	    fputs("Then include the \"typescript\" file in your email.\r\n",
-		stderr);
-	    fputs("\n", stderr);
-#endif /* PLATFORM_UNIX */
-	}
     }
 
     if (interactive) {
@@ -362,179 +328,15 @@
 
 void crash(int internal, const char *fmt, const char *file, int line, long n)
 {
-    FILE *dumpfile;
     setsighandler(SIGQUIT, SIG_DFL);
     minimal_fix_screen();
     reset_tty();
-    dumpfile = get_dumpfile();
-    if (internal) coremsg(dumpfile);
-    fprintf(dumpfile, "> %s:  %s, line %d\r\n",
+    fprintf(stderr, "> %s:  %s, line %d\r\n",
         internal ? "Internal error" : "Aborting", file, line);
     fputs("> ", dumpfile);
-    fprintf(dumpfile, fmt, n);
-    fputs("\r\n\n", dumpfile);
-    if (dumpfile != stderr)
-	fclose(dumpfile);
-    debugger_dump();
     raise(SIGQUIT);
 }
 
-static char dumpname[32] = "................................";
-static char exebuf[PATH_MAX+1];
-static const char *initial_path = NULL;
-static char initial_dir[PATH_MAX+1] = "."; /* default: many users never chdir */
-
-static void coremsg(FILE *dumpfile)
-{
-    fputs("Also describe what you were doing in tf when this\r\n", stderr);
-    fputs("occured, and whether you can repeat it.\r\n\n", stderr);
-    fprintf(dumpfile, "> %.512s\r\n", version);
-    if (*sysname) fprintf(dumpfile, "> %.256s\r\n", sysname);
-    fprintf(dumpfile, "> %.256s\r\n", featurestr->data);
-    fprintf(dumpfile,"> virtscreen=%ld, visual=%ld, expnonvis=%ld, "
-	"emulation=%ld, lp=%ld, sub=%ld\r\n",
-        virtscreen, visual, expnonvis, emulation, lpflag, sub);
-#if SOCKS
-    fprintf(dumpfile,"> SOCKS %d\r\n", SOCKS);
-#endif
-    fprintf(dumpfile,"> TERM=\"%.32s\"\r\n", TERM ? TERM : "(NULL)");
-    fprintf(dumpfile,"> cmd=\"%.32s\"\r\n",
-	current_command ? current_command : "(NULL)");
-    if (loadfile) {
-	fprintf(dumpfile,"> line %d-%d of file \"%.32s\"\r\n",
-	    loadstart, loadline,
-	    loadfile->name ? loadfile->name : "(NULL)");
-    }
-}
-
-void init_exename(char *name)
-{
-    argv0 = name;
-#if HAVE_GETCWD
-    getcwd(initial_dir, PATH_MAX);
-#elif HAVE_GETWD
-    getwd(initial_dir);
-#endif
-    initial_path = getenv("PATH");
-}
-
-static FILE *get_dumpfile(void)
-{
-    FILE *file;
-    sprintf(dumpname, "tf.dump.%d.txt", getpid());
-    file = fopen(dumpname, "w");
-    if (!file) {
-	fputs("\r\n\nPlease report the following message to the bug reporting "
-	    "system at http://tinyfugue.sourceforge.net/\r\n"
-	    "or by email to kenkeys@users.sourceforge.net.\r\n", stderr);
-	return stderr;
-    } else {
-	fprintf(stderr, "\r\n\nDumped debugging information to file '%s'.\r\n"
-	    "Please submit this file to the bug reporting system at\r\n"
-	    "http://tinyfugue.sourceforge.net/ or by email to kenkeys@users.sourceforge.net.\r\n",
-	    dumpname);
-	fputs("# TinyFugue debugging information\n\n", file);
-	return file;
-    }
-}
-
-#if defined(PLATFORM_UNIX) && HAVE_WAITPID
-static const char *test_exename(const char *template, pid_t pid)
-{
-    struct stat statbuf;
-    sprintf(exebuf, template, pid);
-    return (stat(exebuf, &statbuf) == 0) ? exebuf : NULL;
-}
-
-static const char *get_exename(pid_t pid)
-{
-    const char *exename;
-    const char *dir;
-    size_t len;
-    struct stat statbuf;
-    /* a /proc entry is most reliable, if one exists */
-    if ((exename = test_exename("/proc/%d/file", pid)) ||       /* *BSD */
-	(exename = test_exename("/proc/%d/exe", pid)) ||        /* Linux */
-	(exename = test_exename("/proc/%d/object/a.out", pid))) /* Solaris */
-    {
-	return exename;
-    }
-    /* else use argv[0]:
-	if it starts with "/", use it directly;
-	else if it contains "/", it's relative to initial working dir;
-	else, search for it in initial $PATH
-    */
-    if (!argv0) {
-	return NULL;
-    }
-    if (argv0[0] == '/') {
-	return argv0;
-    }
-    if (strchr(argv0, '/')) {
-	sprintf(exebuf, "%s/%s", initial_dir, argv0);
-	return exebuf;
-    }
-    if (!initial_path || !*initial_path)
-	return NULL;
-    dir = initial_path;
-    while (1) {
-	len = strcspn(dir, ":\0");
-	if (*dir == '/')
-	    sprintf(exebuf, "%.*s/%s", len, dir, argv0);
-	else
-	    sprintf(exebuf, "%s/%.*s/%s", initial_dir, len, dir, argv0);
-	if (stat(exebuf, &statbuf) == 0)
-	    return exebuf;
-	if (!dir[len])
-	    break;
-	dir += len + 1;
-    }
-
-    return NULL;
-}
-
-/* Inspired by Jeff Brown */
-static int debugger_dump(void)
-{
-    pid_t tf_pid = getpid();
-
-    const char *exename;
-
-    if ((exename = get_exename(tf_pid))) {
-	pid_t child_pid;
-	child_pid = fork();
-	if (child_pid < 0) {
-	    /* error */
-	    fprintf(stderr, "fork: %s\r\n", strerror(errno));
-	} else if (child_pid > 0) {
-	    /* parent */
-	    pid_t wait_pid = 0;
-	    int status = 0;
-	    wait_pid = waitpid(child_pid, &status, 0);
-	    if (shell_status(status) == 0) {
-		return 1;
-	    } else {
-		unlink(dumpname);
-	    }
-	} else {
-	    /* child */
-	    char inname[1024];
-	    char cmd[2048];
-	    int retval;
-	    sprintf(inname, "%.1000s/tf.gdb", TFLIBDIR);
-	    sprintf(cmd, "chmod go-rwx %s; gdb -n -batch -x %s '%s' %d "
-		">>%s 2>&1", dumpname, inname, exename, tf_pid, dumpname);
-	    retval = system(cmd);
-	    exit(shell_status(retval) == 0 ? 0 : 1);
-	}
-    }
-    return 0;
-}
-
-#else /* !PLATFORM_UNIX */
-static int debugger_dump(void) { return 0; }
-#endif /* PLATFORM_UNIX */
-
 static void terminate(int sig)
 {
     setsighandler(sig, SIG_DFL);
