<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- $Id$ -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>Open eGovernment Developer's Guide</title>
    <authorgroup>
      <corpauthor>Open E-Government Team</corpauthor>
    </authorgroup>
    <copyright>
      <year>2009, 2010, 2011</year>
      <holder>Gerrit M. Albrecht</holder>
    </copyright>
    <legalnotice>
      <para>This work is licensed under the Creative Commons Attribution License. To view a copy of this license, visit <ulink url="http://creativecommons.org/licenses/by/2.5/">http://creativecommons.org/licenses/by/2.5/</ulink> or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.</para>
    </legalnotice>
  </bookinfo>

  <chapter>
    <title>Introduction for Developers</title>
    <section>
      <title>Overview</title>
      <para>.</para>
    </section>
    <section>
      <title></title>
      <para>.</para>
    </section>
  </chapter>

  <chapter>
    <title>Setup from Scratch</title>
    <section>
      <title>Overview</title>
      <para>This chapter describes the steps needed to get an environment for building
own applications with latest tools and self-compiled libraries.
The description works with a fully updated Microsoft Windows 7 OS. If you use
Linux you have to select and/or compile the required applications using the packet manager
of your distribution.</para><!-- todo: separate chapters for windows/linux -->
    </section>
    <section>
      <title>Preparation and Setup</title>
      <para>To build everything you first need a setup with some prebuilt stuff. Applications need e.g. gettext and it's simpler to use a binary version first. Later you may rebuild such required applications and all of their dependent packages using the "builder" package (which needs gettext to compile).</para>

<para>The first setup step is the installation of Qt. Retrieve a complete development package (with MinGW and precompiled libraries) from <ulink url="https://qt.nokia.com/downloads">https://qt.nokia.com/downloads</ulink>, after adding the needed precompiled libraries this is all you need to be ready for working. First we install a complete Qt. Maybe it is better to use the offline installer. They call the complete packages SDK and you get an executable file to install everything in one step (Qt_SDK_Win_offline_v1_1_4_en.exe). Check if your startmenu contains a "Qt SDK" entry because there were installers which had problems with creating it for all users.</para>

<para>To build applications you need a lot of standard tools and applications. Most of them only compile with patches or when other tools are available. So you have to build a nearly complete GNU toolchain. It is planned to use the builder application which creates official binary packages and to provide them on the homepage someday.Untel then we insert some precompiled binaries and with the help of them we build everything by yourself.</para>

<para>Independent binary tools may be downloaded from their respective websites. The following tools can be installed as binaries directly from their homepages:
        <itemizedlist>
          <listitem><para>CMake 2.8 (install exe and add to system path)</para></listitem>
          <listitem><para>gettext (put exe and libs, headers, ... into development directory)</para></listitem>
          <listitem><para>Git</para></listitem>
          <listitem><para>SVN</para></listitem>
          <listitem><para>Perl</para></listitem>
          <listitem><para>Python</para></listitem>
        </itemizedlist>
      </para>

<para>These tools are required, but available as OEG packages and my simply fetched and installed using OEG's package manager or you use the OEG development installer:
        <itemizedlist>
          <listitem><para>peflags</para></listitem>
          <listitem><para>signtool</para></listitem>
        </itemizedlist>
Be aware that the binary installation path differs from your OEG develpment path with your sources and self-compiled binaries. Maybe you need to copy them into your development directory.</para>

<para>Now download the Open eGovernment source package and extract it to any path you want. This is your base installation path. You don't need to set an environment variable because all binaries are installed into base/bin and know their base directory path. It's possible to put the directory structure onto an USB stick.</para>

<para>There are some required packages which need to be installed: opencv (requires: ..., optionally requires: ...)</para>
    </section>
  </chapter>

  <chapter>
    <title>Directory Structure</title>
    <section>
      <title>Overview</title>
      <para>This chapter describes the different directories and their tree structure.</para>
    </section>
    <section>
      <title>Configuration files</title>
      <para>
Einführung

Die Konfigurationsdateien befinden sich unter "/etc/open-egov/" und werden durch die "settings"-Anwendung erzeugt.
Dazu werden die von den jeweiligen Projekten bereitgestellten XML-Dateien eingelesen und in einer grafischen
Oberfläche dem Nutzer präsentiert. Beim Abspeichern der Eingaben, werden die XML-Dateien als flache Text-Dateien
gespeichert, da es so möglich ist, Anwendungen ohne XML-Bibliothek zu linken (könnte schneller sein) und auch
das Parsen der Dateien schneller ablaufen kann, wenn es reicht, zeilenweise einzulesen. Dazu wird eine Zeile gelesen,
das jeweils erste Wort ist der Befehl, der ausgeführt wird. Dann folgen die jeweiligen Parameter bis zum Zeilenende.
Leerzeichen werden rechts und links abgeschnitten und sonst als Parameter-Trenner interpretiert, es sei denn, eine
Zeichenkette steht in Anführungszeichen, dann sind Leerzeichen natürlich in der Zeichenkette erlaubt.


Mögliche Befehle

load "pfad" "datei1 datei2 datei3"

Der "load"-Befehl bekommt einen Pfad zu einem Verzeichnis und eine zu ladende Dateiliste (ohne die Endung ".txt") übergeben. Damit ist es möglich, auf externe Dateien zu verweisen, welche mitgeladen werden sollen. Es soll vermieden werden, alle globalen Einstellungen für jede Anwendung in die anwendungsspezifische Konfiguration übernehmen zu müssen, aber gleichzeitig sollten globale Einstellungen nicht komplett geladen werden müssen. Fehlt der "load"-Befehl wird implizit dennoch ein "load defaults *.txt" ausgeführt. Die Liste der relevanten Dateien kennt der "settings"-Editor, da er ja wissen muss, welche globalen Rubriken zusätzlich zu den eigentlichen Einstellungen angezeigt werden sollen, wenn der Editor von einer Anwendung aus aufgerufen wird. Das steht in der XML-Datei der Anwendung.

default name wert

Belegt einen Schlüssel mit einem Wert und merkt sich, dass dies ein Vorgabewert ist. Der Schlüssel kann also ohne Kenntnis des Wertes auf diesen zurückgestellt werden, wenn bspw. nur temporär (bspw. im Speicher, nicht in der Datei) eine Änderung notwendig war.

set name wert

Der "set"-Befehl ermöglicht das Setzen von Werten für Schlüssel vorzunehmen, sofern diese nicht bereits als "const" erstellt wurden.

const name wert

Der "const"-Befehl dient dazu, das Überschreiben wichtiger Einstellungen zu verhindern. So kann der Adminstrator Vorgaben einstellen, die in jedem Fall unverändert bleiben. Eine mit dem "set"-Befehl angelegte Variable wird so automatisch zur Konstante. Ein Aufruf ohne Wert führt zum fixieren des aktuellen Werts.

reset name

Setzt den aktuell hinterlegten Vorgabewert für den angegebenen Schlüssel.


Verzeichnisstrukturen

Das Dateisystem unterhalb von "/etc/open-egov/" hat folgende Struktur:

"defaults" - enthält die Konfigurationsvorgaben von den Erstellern des OEG-Projekts. Viele Daten sind schlichtweg nicht in die Anwendungen einkompiliert, sondern werden erst zur Laufzeit korrekt gesetzt. Beispielsweise die Schriftarten für die Dialoge. Es würde nur wenig Sinn machen, diese im Designer perfekt zu gestalten, wenn später sowieso Nutzereinstellungen greifen sollen. Also werden Dialoge erstellt und erst danach automatisiert an Sprache und Designvorgaben angepasst. Solche (global für alle Anwendungen gültigen) Vorgaben befinden sich in diesem Verzeichnis. Für jedes Thema im Settings-Editor gibt es eine extra Datei, da es möglich ist, das eine Anwendung nur bestimmte Themen laden möchte (Derzeit nicht implementiert) und so Ressourcen gespart werden können. Die Werte in "defaults" müssen durch den Administrator erzeugt und an die Installation angepasst werden. Dazu braucht nur der "settings"-Editor mit Schreibrechten auf dieses Verzeichnis geöffnet werden und beim Schließen werden automatisch passende Dateien am richtigen Ort angelegt.

Wer den Editor nicht als root starten kann oder möchte, kann auch die Dateien in einem Benutzerverzeichnis erzeugen lassen und anschließend verschieben. Benutzer können, je nach Vorgaben des Administrators (siehe "const"-Befehl) in den "defaults"- Dateien getroffene Entscheidungen und Vorgaben überschreiben, indem im Benutzerverzeichnis ein "HOME/.open-egov/etc/defaults"-Verzeichnis angelegt und gefüllt wird. Fehlen Schreibrechte auf "defaults", speichert der Editor hier automatisch komplette Dateien ab und nicht nur die geänderten Schlüssel als Überschreibungen der vorhandenen in "defaults".

"applications" (optional) - Im Verzeichnis "applications" befinden sich TXT-Dateien, welche nach dem Basis-Namen der jeweiligen Anwendung benannt sind, für die sie Konfigurationsvorgaben enthalten. Sinn ist es, Anwendungs-bezogen Konfigurationen vornehmen zu können. Beispielsweise soll eine Komponente sich in verschiedenen Anwendungen verschieden verhalten. Bspw. kann ein Karten-Anzeiger im Baumkataster anderes konfiguriert werden als in einer Quadrokopter-Fernsteuersoftware.

"settings" -  Die meisten Anwendungen bieten auch das Vornehmen nutzerspezifischer Einstellungen an. Im Verzeichnis "HOME/.open-egov/etc/settings/appname.txt" befinden sich unter dem Basis-Namen der Anwendung die im Settings-Dialog im Anwendungs-Kontext getätigten Einstellungen des Benutzers.

"roles" (optional) - in diesem Verzeichnissen befinden sich Anpassungen an die jeweilige Rolle des Nutzers der Anwendung. So könnte ein Gast andere Informationen oder Farben eingeblendet bekommen als ein Administrator.

"widgets" (nicht implementiert) - erlaubt das Überschreiben von Einstellungen auf Ebene der Elemente der grafischen Benutzeroberfläche. Dies sind in der Regel Stilvorgaben oder Ausblendungen von noch nicht funktionierenden GUI-Elementen. Dazu kann der Pfad bis zum jeweiligen Widget gegeben werden und es lassen sich Änderungen direkt an den Eigenschaften vornehmen.

"hosts" (nicht implementiert) - erlaubt es, je nach Umgebung andere Pfade einzustellen. Also beispielsweise am PC zu Hause einen anderen Webbrowser zu nehmen als auf Arbeit auf dem Linux-Rechner.

"scripts" - Zu guter Letzt lassen sich Scripte hinterlegen, welche bei bestimmten Handlungen (starten oder beenden der Anwendung, sichern der Datenbank, ...) anspringen und per JavaScript beliebige Aktionen erlauben.


Reihenfolge beim Einlesen

Konfigurationsdateien können mehrfach identische Konfigurationsparameter (Schlüssel) ändern. Die Werte können auch widersprüchlich sein, sollten aber dann auch assozierte Schlüssel anpassen, damit keine Anwendungen durcheinander kommen. Wenn also beispielsweise im Netzwerkmanager der Proxy eingeschaltet wird, dann muss klar sein, dass auch gültige Werte für Rechner und ggf. Zugangsdaten eingetragen sind.

Eine Anwendung lädt die Konfigurationsdateien immer in der folgenden Reihenfolge:

* BASE/etc/open-egov/defaults/*.txt            ; Administrative Vorgaben für alle Anwendungen.
* HOME/.open-egov/etc/defaults/*.txt           ; Private Überschreibungen dieser Vorgaben ("defaults.user").
* BASE/etc/open-egov/applications/appname.txt  ; Applikationsspezifische Einstellungen.
* HOME/.open-egov/etc/settings/appname.txt     ; Die vom Nutzer eingestellten Daten (Konfigurationsdaten) ("settings.user").

TODO:

* widgets/*.txt
* roles/*.txt
* hosts/*.txt

* BASE/etc/open-egov/scripts/appname.js

BASE kann hierbei für "/" oder auch für ein Verzeichnis an einer beliebigen Stelle im Dateisystem (USB-Stick, Nutzerverzeichnis) stehen.
</para>
    </section>
    <section>
      <title>Packs</title>
      <para>Every package, OEG is able to use, can be found in the subdirectory "packs".
A pack is a package which contains download and build instructions, patches,
dependencies and other information used to compile a package and integrate
it into the OEG directory structure.</para>
      <para>The directory packs/archives contains binary archives which can be installed
without compiling them yourself. The packs/instructions contains files needed
to build a pack from zero. This directory needs to get recursively updated
every time you want to install something new in order to always use the latest
sources and instructions. The directory packs/downloads contains distributed
source codes downloaded from the homepages of the packs. It is not complete and contains only
rare files or files extracted from a repository.</para>
    </section>
  </chapter>

  <chapter>
    <title>Application Development</title>
    <section>
      <title>Overview</title>
      <para>Every application may, at its option, use Qt's or OEG's classes. It's recommended to
      make use of the (enhanced) OEG classes, which provide a lot of standard-offer capabilities
      already built-in. The common way to open your application's window is to derive a class from
      OEG::Qt::MainWindow.</para>
      <para>While development it may help to add "CONFIG += console" into your .pro file.</para>
    </section>

    <section>
      <title>Get Started</title>
      <para>The best method to get ready is using the template application.</para>
      <para></para>
      <programlisting language="c++"><![CDATA[  ]]></programlisting>
    </section>

    <section>
      <title>Compilation</title>
      <para>To compile a project, "qmake" and "mingw32-make" is all you have to type. The binary is placed into OEG's bin directory and my be started with the command "mingw32-make run" or by double-click at its icon.</para>
    </section>

    <section>
      <title>Post Compilation Steps</title>
      <para>After compilation some additional build steps are executed. First, the newly build executable
      gets stripped to reduce the file size. This needs the strip.exe, usually found in the MinGW/MSYS
      environment. Next the application or DLL is marked to use Data Execution Prevention and Adress
      Space Layout Randomisation to avoid a to simple exploitation. This is done with the peflags.exe
      which has to exist in the bin folder in order to be used automatically. In a last step the application
      gets signed using a self-generated certificate. This ensures the official origin of it, but unfortunately
      it's a simple certificate and not one from a big trust center.</para>
    </section>
  </chapter>

  <chapter>
    <title>Well-known Error Messages</title>
    <section>
      <title>Old Include Files</title>
      <para>The compilation of standard applications should always run successfully because no non-functional software should be checked in into the repository. If nevertheless you experience any difficulties, it is often due to third party software. While compiling you may see such warnings:</para>
      <screen><![CDATA[# In file included from c:\Qt\2010.04\qt\include/QtCore/qglobal.h:1,
                 from c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/global/q
namespace.h:45,
                 from c:\Qt\2010.04\qt\include/QtCore/qnamespace.h:1,
                 from c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/kernel/q
objectdefs.h:45,
                 from c:\Qt\2010.04\qt\include/QtCore/qobjectdefs.h:1,
                 from c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/kernel/q
object.h:47,
                 from c:\Qt\2010.04\qt\include/QtCore/qobject.h:1,
                 from c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/kernel/q
coreapplication.h:45,
                 from c:\Qt\2010.04\qt\include/QtCore/qcoreapplication.h:1,
                 from c:\Qt\2010.04\qt\include\QtGui/../../src/gui/kernel/qappli
cation.h:45,
                 from c:\Qt\2010.04\qt\include\QtGui/qapplication.h:1,
                 from c:\Qt\2010.04\qt\include\QtGui/QApplication:1,
                 from ..\..\..\..\libraries/OEG/Qt/Application.h:7,
                 from MainWindow.cpp:3:
c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/global/qglobal.h:1594: warning
: 'libintl_printf' is an unrecognized format function type
c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/global/qglobal.h:1600: warning
: 'libintl_printf' is an unrecognized format function type
c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/global/qglobal.h:1608: warning
: 'libintl_printf' is an unrecognized format function type
c:\Qt\2010.04\qt\include/QtCore/../../src/corelib/global/qglobal.h:1613: warning
: 'libintl_printf' is an unrecognized format function type]]></screen>
      <para>These indicate, that the include files of gettext are out of date. Install current libiconv and gettext packages to get rid of the message.</para>
    </section>

    <section>
      <title>Unused Variables</title>
      <para>If you see a warning about unused variables and want to get rid of it, you may disable them globally or (better) mark the variable as unused. E. g. if you open your MainWindow this warning may appear.</para>
      <code><![CDATA[MainWindow *mw __attribute__ ((__unused__)) = new MainWindow();]]></code>
      <para>A simpler solution (only in this case) is it, to place the call of the show() method after the definition.</para>
    </section>

    <section>
      <title>Untranslated texts are in English</title>
      <para>While translating and localizing your application it is possible, that gettext asks you to include 
      a --from-code=iso-8859-1. This means, it has found some text, which should be english (as all untranslated texts),
      but contains non-english characters. This may be an untranslated german text. Yes, this is a bug.</para>
    </section>

    <section>
      <title>HANDLE vs. Qt::HANDLE</title>
      <para>While compiling Windows API source code into a Qt library there may be errors because of ambigous variables
      where the compiler is unable to resolve the datatype HANDLE (is it ::HANDLE or Qt::HANDLE?). Don't try to
      mark the variables with ::, better is, to remove the "using namespace Qt;" line from the top of the file.
      It is only there to allow the use of Qt constants without a "Qt::" prefix.</para>
    </section>
  </chapter>

  <chapter>
    <title>Hints and Tips</title>
    <section>
      <title>Compile and Run</title>
      <para>After compilation the executables are created in the bin directory far away from the work directory.
      To run the application it is possible to add the target run to your make, e. g. type "mingw32-make run".
      This executes the newly created file.</para>
    </section>
  </chapter>

  <chapter>
    <title>Rules</title>
    <section>
      <title>Coding Rules</title>
      <para lang="de">Wir verwenden nicht die .qrc-Ressourcen-Dateien von Qt. Ressourcen sollten niemals in die ausführbare Datei eingelinkt werden, es sei denn, es ist absolut notwendig.</para>
      <para lang="en">We don't use the .qrc ressources files from Qt. Resources should never be linked into the executable file unless it is absolutely necessary.</para>

      <para lang="de">Die Schaltfläche zum Beenden der Anwendung erscheint nicht in der Werkzeugleiste.</para>
      <para lang="en">The button to exit the application does not appear in the toolbar.</para>

      <para lang="de">Wenn die Anwendung nicht fehlerfrei kompiliert werden kann, dann muss ihr Verzeichnis aus der Datei src/applications/xyz/xyz.pro entfernt werden. So kann sicher gestellt werden, dass die restlichen Anwendungen ohne Unterbrechungen aufgrund von Kompilierfehlern erstellt werden können.</para>
      <para lang="en">If the application can't be compiled without errors, then its directory need to be removed from the file src/applications/xyz/xyz.pro. This assures that the rest of the applications can be created without interruptions due to compilation errors.</para>

      <!-- para lang="de"></para>
      <para lang="en"></para -->
    </section>
  </chapter>

  <chapter>
    <title>DBUS Scripting</title>
    <section>
      <title>Overview</title>
      <para></para>
    </section>
  </chapter>

  <chapter>
    <title>JavaScript Scripting</title>
    <section>
      <title>Overview</title>
      <para></para>
    </section>
  </chapter>

  <chapter>
    <title>Data Storage</title>
    <section>
      <title>Overview</title>
      <para>Data may be stored into databases and/or files. This is configurable. As databases at least MySQL and SQLite are always supported. The Database Manager is able to backup, mix, update or convert databases between the different engines (e.g. MySQL/Inno-DB, MySQL/MyISAM), or applications (MySQL, SQLite, XML). It allows to upgrade from one data format to another (but not back to an older!). This allows you to work first with SQLite-Databases and later switch to a real database management system if you really need one.</para>
      <para>You have to distinguish document-centered applications (like a text processor) and record-based applications, like an address book. Documents may be stored in XML files, or as binary blobs in databases. Records may only be stored in databases or XML-based. XML is only possible, if there are only few entries and if the result should be an document containing the records.</para>
      <para>As a general guideline, use XML documents, if you have an document centered application. If you have records, use a real database starting with SQLite up to MySQL.</para>
    </section>

    <section>
      <title>Database Support</title>
      <para>Applications may use databases as desired. Every OEG application may provide a database description in its
      application.xml file. This file informs OEG about the database to be used and it's possible to generate a SQL
      file from it, which contains the initialization code for an empty database in the correct format for the desired
      database application and engine. The database component is able to use it to create a new database or to update
      an existing database. Many applications come with pre-filled databases. Databases or single records may be public
      (group or role-based spreading), private (role-based accesss) or official. Official parts of databases may be
      updated from the OEG website. Others are spread by using peer-to-peer techniques or encrypted mail transfer.
      Updates of public parts (databases, records) are applied automatically.</para>
    </section>

    <section>
      <title>XML Databases</title>
      <para>Every database may be converted into a XML file and back.</para>
    </section>

    <section>
      <title>SQLite Databases</title>
      <para></para>
    </section>

    <section>
      <title>MySQL Databases</title>
      <para></para>
    </section>

    <section>
      <title>XML Documents</title>
      <para>Application may store their data into XML-based documents. However, it's also possible
      to store them as binary blobs in a database, but in this case consider to use a real database.
      The advantage of XML files is the possibility to use them as sources for other areas of application.
      So you may generate derived data files using simple XSL scripts.</para>
    </section>

    <section>
      <title>Flat Files as Table Replacement</title>
      <para>Flat files are configured and handled like databases. Typical applications are for storage purposes, e.g. in the document management system or special applications. Think of a tree cadaster, where the database contains the (textual) data in SQLite files and you will not place the big fotos of the trees into your small database. Then you are able to select the "table" and put the entries with random names into a directory. Or, maybe, an address book wants to store the contacts each in a single file.</para>
    </section>
  </chapter>

  <chapter>
    <title>Localization</title>
    <section>
      <title>Overview</title>
      <para>OEG uses GNU gettext and not Qt's internal translation system to provide localized messages and user
      interfaces. This allows you to make use of the proved and tested translation tools around gettext and to
      contact translation groups using gettext or related to KDE.</para>
      <para>Dialoge (Dateien mit der Endung .ui) werden, um ein einheitliches Erscheinungsbild zu gewährleisten, immer nur in einer Sprache, nämlich en_US, erstellt. Inhalte werden in einer separaten Methode lokalisiert und damit der Dialog an die Sprache angepasst. Separate, sprachspezifische Dialoge sind unbedingt zu vermeiden.</para>
    </section>
  </chapter>
</book>

